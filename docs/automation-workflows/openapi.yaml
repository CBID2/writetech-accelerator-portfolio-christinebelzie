openapi: 3.0.3
info:
  title: Sample API
  description: |
    This is a sample API specification for testing Spectral linting and Redocly documentation generation.
    
    ## Features
    - User management
    - Task management
    - Authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: users
    description: User management operations
  - name: tasks
    description: Task management operations

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users in the system
      operationId: getAllUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
        '500':
          description: Internal server error
          
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

  /tasks:
    get:
      tags:
        - tasks
      summary: Get all tasks
      description: Retrieve a list of all tasks
      operationId: getAllTasks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        createdAt:
          type: string
          format: date-time
          description: When the user was created
          
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
          
    Task:
      type: object
      required:
        - id
        - title
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the task
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        status:
          type: string
          enum: [pending, in_progress, completed]
          description: Current status of the task
        assigneeId:
          type: string
          format: uuid
          description: ID of the user assigned to this task
        createdAt:
          type: string
          format: date-time
          description: When the task was created